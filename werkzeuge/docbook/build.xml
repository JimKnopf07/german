<?xml version="1.0"?>

<!-- Set the base directory to the location of the xml files -->
<project name="DocBook environment" basedir="." default="all">

<!-- ==========================================================================================	
	 PROPERTIES
     ========================================================================================== -->

	<!-- main path to the docbook tools -->
	<property name="docbook.home" value="/db" />
	<!-- how to translate Win paths to Unix paths? - needed for installation -->
	<property name="docbook.home" value="${basedir}"/>

	<!-- Source Directory -->
	<dirname property="source.dir" file="${source}"/>  
	<!-- Source file -->
	<basename property="source.file" file="${source}"/>  

	<!-- Target file -->
	<basename property="target.file" file="${source}" suffix="xml"/>  
	<!-- target base -->
	<property name="target.dir" value="${docbook.home}/output/${target.file}"/>

	<!-- target directories -->
	<property name="html.dir"  value="${target.dir}/html"/>
	<property name="chunk.dir" value="${target.dir}/chunk"/>
	<property name="fo.dir"    value="${target.dir}/fo"/>
	<property name="pdf.dir"   value="${target.dir}/pdf"/>
	
	<!-- read in information about needed programs -->
	<xmlproperty file="programs.xml"/>                      
	
	<!-- Where all programs are stored -->
	<property name="programs.home"    value="${docbook.home}/programs"/>
	<!-- Paths to our tools -->
	<property name="fop.home"         value="${programs.home}/${programs.fop.directory}"/>
	<property name="superfop.home"    value="${programs.home}/${programs.superfop.directory}"/>
	<property name="saxon.home"       value="${programs.home}/${programs.saxon.directory}"/>
	<property name="resolver.home"    value="${programs.home}/${programs.resolver.directory}"/>
	<property name="xerces-j.home"    value="${programs.home}/${programs.xerces-j.directory}"/>
	<property name="docbook-xsl.home" value="${programs.home}/${programs.docbook-xsl.directory}"/>
	<property name="docbook-dtd.home" value="${programs.home}/${programs.docbook-dtd.directory}"/>

	<!-- Where all customizable files are stored -->
	<property name="custom.home"      value="${docbook.home}/custom"/>
	<!-- Paths to our customizations -->
	<property name="graphics.home"    value="${custom.home}/${programs.graphics.directory}"/>
	<property name="custom.home.fo"   value="${custom.home}/fo"/>
	<property name="stylesheets.home" value="${custom.home}/${programs.stylesheets.directory}"/>
	<property name="catalogs.home"    value="${custom.home}/${programs.catalogs.directory}"/>
	
	<!-- Installation sources -->
	<property name="install.home"          value="${docbook.home}/install" />                   
	<property name="install.programs.home" value="${install.home}/programs" />                   
	<property name="install.custom.home"   value="${install.home}/custom" />                   
	
	<!-- Where are the callouts stored? (corresponds to the stylesheet) -->
	<property name="images.subdir" value="images"/>
	<!-- What is the extension of the callouts? (corresponds to the stylesheet) -->
	<property name="images.exten" value="gif"/>

	
<!-- ==========================================================================================	
     ========================= SETTING UP CLASSPATHS AND CLASS NAMES ==========================
     ========================================================================================== -->
	
<!-- ==========================================================================================	
	 Resolver
     ========================================================================================== -->
	<property name="resolver.reader.class" value="org.apache.xml.resolver.tools.ResolvingXMLReader"/>
	<property name="resolver.resolver.class" value="org.apache.xml.resolver.tools.CatalogResolver"/>
			
<!-- ==========================================================================================	
	 Saxon
     ========================================================================================== -->
	<property name="xslt.processor.class" value="com.icl.saxon.StyleSheet"/>
	<path id="xslt.processor.classpath">
		<!-- Saxon jar -->
		<pathelement location="${saxon.home}/saxon.jar"/>  
		<!-- resolver jar -->
		<pathelement path="${resolver.home}/resolver.jar"/> 
		<!-- docbook extensions -->
		<pathelement location="${docbook-xsl.home}/extensions/saxon651.jar"/>
		<!-- for catalogManager.properties -->
		<pathelement location="${catalogs.home}"/>
		<pathelement location="${xerces-j.home}/xercesImpl.jar"/>
	</path>
    <!-- Post XSLT transform parameter. Leave as is for Saxon -->
	<property name="param.args.post" value="saxon.extensions=1"/>               

<!-- ==========================================================================================	
	 FOP
     ========================================================================================== -->
	<target name="fop.setup">
		<path id="fop.processor.classpath">
			<pathelement path="${superfop.home}/superfop.jar"/>
			<pathelement path="${fop.home}/build/fop.jar"/>
			<pathelement path="${fop.home}/lib/batik.jar"/>
			<pathelement path="${fop.home}/lib/xalan-2.4.1.jar"/>
			<pathelement path="${fop.home}/lib/xercesImpl-2.2.1.jar"/>
			<pathelement path="${fop.home}/lib/xml-apis.jar"/>
			<pathelement path="${fop.home}/lib/avalon-framework-cvs-20020806.jar"/>
		</path>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath refid="fop.processor.classpath"/>
		</taskdef>
	</target>

<!-- ==========================================================================================
     =================================== DOWNLOAD SETTINGS ====================================
     ========================================================================================== -->
	
	<!-- to be done! -->
	<target name="proxy.host" if="proxy.host">
		<echo message="Setting proxy host to ${proxy.host}" />
	<!--setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/-->
	</target>
	
	<target name="proxy.port" if="proxy.port">
		<echo message="Setting proxy host to ${proxy.port}" />
	</target>

	<target name="proxy" depends="proxy.host, proxy.port" />
	
<!-- ==========================================================================================
     ================================= CHECKING INSTALLATION ==================================
     ========================================================================================== -->

<!-- ==========================================================================================	
	 Check if the required programs are in place
     ========================================================================================== -->
	<target name="check.programs">
		<property name="err.runinstall" value="Please run 'ant install' to install the DocBook environment." />	
		<echo message="Checking ${programs.saxon.description} at ${saxon.home}"/>
		<condition property="tmp:saxon.home" value="true">
			<and>
				<available file="${saxon.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.saxon.description} not found at ${saxon.home}. ${err.runinstall}" unless="tmp:saxon.home"/>
		
		<echo message="Checking ${programs.fop.description} at ${fop.home}"/>
		<condition property="tmp:fop.home" value="true">
			<and>
				<available file="${fop.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.fop.description} not found at ${fop.home}. ${err.runinstall}" unless="tmp:fop.home"/>
		
		<echo message="Checking ${programs.resolver.description} at ${resolver.home}"/>
		<condition property="tmp:resolver.home" value="true">
			<and>
				<available file="${resolver.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.resolver.description} not found at ${resolver.home}. ${err.runinstall}" unless="tmp:resolver.home"/>
		
		<echo message="Checking ${programs.docbook-xsl.description} at ${docbook-xsl.home}"/>
		<condition property="tmp:docbook-xsl.home" value="true">
			<and>
				<available file="${docbook-xsl.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.docbook-xsl.description} not found at ${docbook-xsl.home}. ${err.runinstall}" unless="tmp:docbook-xsl.home"/>

		<echo message="Checking ${programs.docbook-dtd.description} at ${docbook-dtd.home}"/>
		<condition property="tmp:docbook-dtd.home" value="true">
			<and>
				<available file="${docbook-dtd.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.docbook-dtd.description} not found at ${docbook-dtd.home}. ${err.runinstall}" unless="tmp:docbook-dtd.home"/>
	</target>
	
<!-- ==========================================================================================	
	 Check if the required customized files are in place
     ========================================================================================== -->
	<target name="check.customfiles">
		<echo message="Checking ${programs.stylesheets.description} at ${stylesheets.home}"/>
		<condition property="tmp:stylesheets.home" value="true">
			<and>
				<available file="${stylesheets.home}" type="dir"/>
			</and>
		</condition>
		<fail message="${programs.stylesheets.description} not found at ${stylesheets.home}. ${err.runinstall}" unless="tmp:stylesheets.home"/>

		<echo message="Checking Graphics at ${graphics.home}"/>
		<condition property="tmp:graphics.home" value="true">
			<and>
				<available file="${graphics.home}" type="dir"/>
			</and>
		</condition>
		<fail message="'graphics.home' does not point at the graphics directory: ${graphics.home}" unless="tmp:graphics.home"/>
	</target>
	
<!-- ==========================================================================================	
	 Check if the source files are in place
     ========================================================================================== -->
	<target name="check.source">
		<fail message="No source document set. Check your setup!" unless="source" />
		<echo message="Checking Source file at ${source}"/>
		<condition property="tmp:docbook.sourcefile" value="true">
			<and>
				<available file="${source}" type="file"/>
			</and>
		</condition>
		<fail message="Cannot find source file ${source}" unless="tmp:docbook.sourcefile"/>
	</target>
	
<!-- ==========================================================================================	
	 Check if all needed files are in place
     ========================================================================================== -->
	<target name="check.files" depends="check.programs, check.customfiles, check.source"></target>
	
<!-- ==========================================================================================	
	Create necessary directories
     ========================================================================================== -->
	<target name="init" depends="check.files">
		<mkdir dir="${target.dir}"/>
	</target>

<!-- ==========================================================================================	
     ============================== HTML SINGLE FILE PROCESSING ===============================
     ========================================================================================== -->
	
<!-- ==========================================================================================	
     Create the directory to store the file
     ========================================================================================== -->
	<target name="process.html.dir" depends="init">
		<mkdir dir="${html.dir}"/>
	</target>
	
<!-- ==========================================================================================	
     copy the images from the source directory to the html directory
     ========================================================================================== -->
	<target name="process.html.images" depends="process.html.dir">
		<copy todir="${html.dir}" flatten="true">
			<fileset dir="${source.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.jpg"/>
				<include name="**/*.jpeg"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy the CSS style sheet to the html directory
     ========================================================================================== -->
	<target name="process.html.css" depends="process.html.dir">
		<copy todir="${html.dir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.css"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy callout graphics to the html directory
     ========================================================================================== -->
	<target name="process.html.callouts" depends="process.html.dir">
		<copy todir="${html.dir}/${images.subdir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.${images.exten}"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     transform the source file to a single html file
     ========================================================================================== -->
	<target name="process.html" depends="process.html.dir">
		<java classname="${xslt.processor.class}" fork="yes" failonerror="true">
			<!-- set up Xerces as the XML parser in Saxon -->
			<jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
			<jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
			<!-- turn on the XInclude feature -->
			<jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			
			<classpath refid="xslt.processor.classpath"/>

			<!-- resolver class to read source documents -->
			<arg value="-x"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class to read stylesheets -->
			<arg value="-y"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class -->
			<arg value="-r"/>
			<arg value="${resolver.resolver.class}"/>
			
			<!-- output file -->
			<arg value="-o"/>
			<arg value="${html.dir}/${target.file}.htm"/>
			
			<!-- input file -->
			<arg value="${source}"/>
			
			<!-- styleseet -->
			<arg value="${stylesheets.home}/html.xsl"/>
			
			<!-- other parameters -->
			<arg value="${param.args.post}"/>
		</java>
	</target>
	
	<target name="foo">
		<taskdef name = "mtxslt" classname = "org.xmLP.ant.taskdefs.xslt.XSLTProcess"/>
			<property  name="javax.xml.parsers.DocumentBuilderFactory" value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
			<property  name="javax.xml.parsers.SAXParserFactory" value="org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
			<property  name="org.apache.xerces.xni.parser.XMLParserConfiguration" value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
		 <mtxslt processor = "org.xmLP.ant.taskdefs.optional.Saxon6Liaison"
		 		 in        = "${source}"
				 style     = "${stylesheets.home}/html.xsl"
				 out       = "mt-output.html"
				 classpathref = "xslt.processor.classpath" >
		    <xmlcatalog>
				<catalogpath>
                	<pathelement location="${catalogs.home}"/>
				</catalogpath>
			</xmlcatalog>
		</mtxslt>
	</target>
<!-- ==========================================================================================	
     Create a single HTML file
     ========================================================================================== -->
	<target name="html" 
	        depends="process.html.images, process.html.css, process.html.callouts, process.html" 
			description="Create a single HTML file" />


<!-- ==========================================================================================	
     ============================= HTML MULTIPLE FILE PROCESSING ==============================
     ========================================================================================== -->
	
<!-- ==========================================================================================	
     Create the directory to store the files
     ========================================================================================== -->
	<target name="process.chunk.dir" depends="init">
		<mkdir dir="${chunk.dir}"/>
	</target>
	
<!-- ==========================================================================================	
     copy the images from the source directory to the chunk directory
     ========================================================================================== -->
	<target name="process.chunk.images" depends="process.chunk.dir">
		<copy todir="${chunk.dir}" flatten="true">
			<fileset dir="${source.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.jpg"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.css"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy the CSS style sheet to the chunk directory
     ========================================================================================== -->
	<target name="process.chunk.css" depends="process.chunk.dir">
		<copy todir="${chunk.dir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.css"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy callout graphics to the chunk directory
     ========================================================================================== -->
	<target name="process.chunk.callouts" depends="process.chunk.dir">
		<copy todir="${chunk.dir}/${images.subdir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.${images.exten}"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     transform the temp XML file to a series of html files
     ========================================================================================== -->
	<target name="process.chunk" depends="process.chunk.dir">
		<java classname="${xslt.processor.class}" fork="yes" failonerror="true">
			<!-- set up Xerces as the XML parser in Saxon -->
			<jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
			<jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
			
			<!-- turn on the XInclude feature -->
			<jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>

			<classpath refid="xslt.processor.classpath"/>
			
			<!-- resolver class to read source documents -->
			<arg value="-x"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class to read stylesheets -->
			<arg value="-y"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class -->
			<arg value="-r"/>
			<arg value="${resolver.resolver.class}"/>
			
			<!-- input file -->
			<arg value="${source}"/>
			
			<!-- styleseet -->
			<arg value="${stylesheets.home}/chunk.xsl"/>
			
			<!-- output directory -->
			<arg value="base.dir=${chunk.dir}/"/>
			
			<!-- other parameters -->
			<arg value="${param.args.post}"/>
		</java>
	</target>
	
<!-- ==========================================================================================	
     Create a series of HTML files
     ========================================================================================== -->
	<target name="chunk" 
	        depends="process.chunk.images, process.chunk.css, process.chunk.callouts, process.chunk" 
			description="Create a series of HTML files" />


<!-- ==========================================================================================	
     =================================== FO FILE PROCESSING ===================================
     ========================================================================================== -->

<!-- ==========================================================================================	
     Create the directory to store the file
     ========================================================================================== -->
	<target name="process.fo.dir" depends="init">
		<mkdir dir="${fo.dir}"/>
	</target>
	 
<!-- ==========================================================================================	
     copy the images from the source directory to the fo directory
     ========================================================================================== -->
	<target name="process.fo.images" depends="process.fo.dir">
		<copy todir="${fo.dir}" flatten="true">
			<fileset dir="${source.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.jpg"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.css"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy the CSS style sheet to the fo directory
     ========================================================================================== -->
	<target name="process.fo.css" depends="process.fo.dir">
		<copy todir="${fo.dir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.css"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     copy callout graphics to the chunk directory
     ========================================================================================== -->
	<target name="process.fo.callouts" depends="process.fo.dir">
		<copy todir="${fo.dir}/${images.subdir}">
			<fileset dir="${graphics.home}">
				<include name="**/*.${images.exten}"/>
			</fileset>
		</copy>
	</target>

<!-- ==========================================================================================	
     transform the source file to a fo file
     ========================================================================================== -->
	<target name="process.fo" depends="process.fo.dir">
		<java classname="${xslt.processor.class}" fork="yes" failonerror="true">
			<!-- set up Xerces as the XML parser in Saxon -->
			<jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
			<jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
			
			<!-- turn on the XInclude feature -->
			<jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>

			<classpath refid="xslt.processor.classpath"/>

			<!-- resolver class to read source documents -->
			<arg value="-x"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class to read stylesheets -->
			<arg value="-y"/>
			<arg value="${resolver.reader.class}"/>
			
			<!-- resolver class -->
			<arg value="-r"/>
			<arg value="${resolver.resolver.class}"/>
			
			<!-- output file -->
			<arg value="-o"/>
			<arg value="${fo.dir}/${target.file}.fo"/>
			
			<!-- input file -->
			<arg value="${source}"/>
			
			<!-- styleseet -->
			<arg value="${stylesheets.home}/fo.xsl"/>
			
			<!-- other parameters -->
			<arg value="${param.args.post}"/>
		</java>
	</target>

<!-- ==========================================================================================	
     Create a fo file
     ========================================================================================== -->
	<target name="fo" 
	        depends="process.fo.images, process.fo.css, process.fo.callouts, process.fo" 
			description="Create a fo file (only useful for further processing)" />

<!-- ==========================================================================================	
     ================================== PDF FILE PROCESSING ===================================
     ========================================================================================== -->

<!-- ==========================================================================================	
     Create the directory to store the file
     ========================================================================================== -->
	<target name="process.pdf.dir" depends="init">
		<mkdir dir="${fo.dir}"/>
	</target>
	 
<!-- ==========================================================================================	
     Create a PDF file
     ========================================================================================== -->
	<!--target name="pdf" depends="process.pdf.dir, fo" description="Create a PDF file"-->
	<target name="pdf" 
	        description="Create a PDF file" 
			depends="process.pdf.dir, fop.setup, fo">
		<fop format="application/pdf" 
		     fofile="${fo.dir}/${target.file}.fo" 
			 outfile="${pdf.dir}/${target.file}.pdf" 
			 basedir="${fo.dir}"
			 userconfig="${custom.home.fo}/userconfig.xml"/>
	</target>

<!-- ==========================================================================================	
     Do everything
     ========================================================================================== -->
	<target name="all" 
	        depends="html, chunk, pdf" 
			description="Transfer to all formats" />
	
<!-- ==========================================================================================	
     Clean up output files
     ========================================================================================== -->
	<target name="clean.html">
		<delete dir="${target.dir}/${html.dir}"/>
	</target>
	<target name="clean.chunk">
		<delete dir="${target.dir}/${chunk.dir}"/>
	</target>
	<target name="clean.fo">
		<delete dir="${target.dir}/${fo.dir}"/>
	</target>
	<target name="clean.pdf">
		<delete dir="${target.dir}/${pdf.dir}"/>
	</target>
	<target name="clean.all" 
	        depends="clean.html, clean.chunk, clean.fo, clean.pdf">
		<delete dir="${target.dir}"/>
	</target>

	
<!-- ==========================================================================================	
     ================================= INSTALLATION ROUTINES ==================================
     ========================================================================================== -->

<!-- ==========================================================================================	
     Get the latest files from the Internet
     ========================================================================================== -->
	<target name="install.programs.download"
	        unless="dontdownload">
		<mkdir dir="${install.home}"/>
		<mkdir dir="${install.programs.home}"/>
		<get src="${programs.fop.download}${programs.fop.file}"                  dest="${install.programs.home}/${programs.fop.file}"          verbose="true"  usetimestamp="true"/>
		<get src="${programs.superfop.download}${programs.superfop.file}"        dest="${install.programs.home}/${programs.superfop.file}"     verbose="true"  usetimestamp="true"/>
		<get src="${programs.saxon.download}${programs.saxon.file}"              dest="${install.programs.home}/${programs.saxon.file}"        verbose="true"  usetimestamp="true"/>
		<get src="${programs.resolver.download}${programs.resolver.file}"        dest="${install.programs.home}/${programs.resolver.file}"     verbose="true"  usetimestamp="true"/>
		<get src="${programs.xerces-j.download}${programs.xerces-j.file}"        dest="${install.programs.home}/${programs.xerces-j.file}"     verbose="true"  usetimestamp="true"/>
		<get src="${programs.docbook-xsl.download}${programs.docbook-xsl.file}"  dest="${install.programs.home}/${programs.docbook-xsl.file}"  verbose="true"  usetimestamp="true"/>
		<get src="${programs.docbook-dtd.download}${programs.docbook-dtd.file}"  dest="${install.programs.home}/${programs.docbook-dtd.file}"  verbose="true"  usetimestamp="true"/>
	</target>		

<!-- ==========================================================================================	
     Unpack the downloaded files to the destination directory
     ========================================================================================== -->
	<target name="install.programs.unzip" depends="install.programs.download">
		<mkdir dir="${programs.home}" />
		<unzip src="${install.programs.home}/${programs.fop.file}"           dest="${programs.home}/${programs.fop.unzip}"          overwrite="false" />
		<unzip src="${install.programs.home}/${programs.saxon.file}"         dest="${programs.home}/${programs.saxon.unzip}"        overwrite="false" />
		<unzip src="${install.programs.home}/${programs.resolver.file}"      dest="${programs.home}/${programs.resolver.unzip}"     overwrite="false" />
		<unzip src="${install.programs.home}/${programs.xerces-j.file}"      dest="${programs.home}/${programs.xerces-j.unzip}"     overwrite="false" />
		<unzip src="${install.programs.home}/${programs.docbook-xsl.file}"   dest="${programs.home}/${programs.docbook-xsl.unzip}"  overwrite="false" />
		<unzip src="${install.programs.home}/${programs.docbook-dtd.file}"   dest="${programs.home}/${programs.docbook-dtd.unzip}"  overwrite="false" />

		<mkdir dir="${superfop.home}"/>
		<copy file="${install.programs.home}/${programs.superfop.file}" todir="${superfop.home}" />
	</target>

<!-- ==========================================================================================	
     Install the programs
     ========================================================================================== -->
	<target name="install.programs" 
	        depends="install.programs.unzip" />

<!-- ==========================================================================================	
     Create custom directories
     ========================================================================================== -->
	<target name="install.custom.mkdir">
		<mkdir dir="${custom.home}" />
		<mkdir dir="${graphics.home}" />
		<mkdir dir="${custom.home.fo}" />
		<mkdir dir="${stylesheets.home}" />
		<mkdir dir="${catalogs.home}" />
	</target>
	
<!-- ==========================================================================================	
     Unpack the custom files to the destination directory
     ========================================================================================== -->
	<target name="install.custom.unzip" 
	        depends="install.custom.mkdir">
		<unzip src="${install.custom.home}/${programs.fonts.file}"       dest="${custom.home}/${programs.fonts.unzip}"             overwrite="false" />
		<unzip src="${install.custom.home}/${programs.hyph.file}"        dest="${custom.home}/${programs.hyph.unzip}"              overwrite="false" />
		<unzip src="${install.custom.home}/${programs.graphics.file}"    dest="${custom.home}/${programs.graphics.unzip}"          overwrite="false" />
		<unzip src="${install.custom.home}/${programs.stylesheets.file}" dest="${custom.home}/${programs.stylesheets.unzip}"       overwrite="false" />
		<unzip src="${install.custom.home}/${programs.catalogs.file}"    dest="${install.custom.home}/${programs.catalogs.unzip}"  overwrite="false" />
		<unzip src="${install.custom.home}/${programs.fo.file}"          dest="${install.custom.home}/${programs.fo.unzip}"        overwrite="false" />
	</target>

<!-- ==========================================================================================	
     Patch files with pathnames to use the actual pathnames
     ========================================================================================== -->
	<target name="install.custom.copy" 
	        depends="install.custom.mkdir, install.custom.unzip">
		<copy todir="${custom.home}/catalogs">
			<fileset dir="${install.custom.home}/${programs.catalogs.directory}" />
			<filterset>
				<filter token="PROGRAMSHOME" value="${programs.home}" />
				<filter token="DOCBOOKDTD"   value="${programs.docbook-dtd.directory}" />
				<filter token="DOCBOOKXSL"   value="${programs.docbook-xsl.directory}" />
			</filterset>
		</copy>
		<copy todir="${custom.home}/fo">
			<fileset dir="${install.custom.home}/${programs.fo.directory}" />
			<filterset>
				<filter token="CUSTOMFO"     value="${custom.home.fo}" />
			</filterset>
		</copy>
		<delete dir="${install.custom.home}/${programs.catalogs.directory}" />
		<delete dir="${install.custom.home}/${programs.fo.directory}" />		
	</target>
	
	<target name="install.custom" 
	        depends="install.custom.unzip, install.custom.copy" />
	
<!-- ==========================================================================================	
     The main installation routine
     ========================================================================================== -->
	<target name="install" 
	        depends="install.programs, install.custom" 
		    description="install the environment" />

	<target name="uninstall.programs">
		<delete dir="${programs.home}/${programs.fop.directory}" />
		<delete dir="${programs.home}/${programs.saxon.directory}" />
		<delete dir="${programs.home}/${programs.resolver.directory}" />
		<delete dir="${programs.home}/${programs.xerces-j.directory}" />
		<delete dir="${programs.home}/${programs.docbook-xsl.directory}" />
		<delete dir="${programs.home}/${programs.docbook-dtd.directory}" />
	</target>

	<target name="uninstall.custom">
		<delete dir="${programs.home}/${programs.fop.directory}" />
	</target>

	<target name="uninstall" 
	        depends="uninstall.programs, uninstall.custom" />

	<target name="uninstall-all" 
	        depends="uninstall" >
		<delete file="${install.programs.home}/${programs.fop.file}" />
		<delete file="${install.programs.home}/${programs.saxon.file}" />
		<delete file="${install.programs.home}/${programs.resolver.file}" />
		<delete file="${install.programs.home}/${programs.xerces-j.file}" />
		<delete file="${install.programs.home}/${programs.docbook-xsl.file}" />
		<delete file="${install.programs.home}/${programs.docbook-dtd.file}" />
	</target>		
</project>

