<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<chapter id="pnrender.intro" lang="en-US"
         revision="$Revision$ $Date$"
         status="draft">
  <!-- $Id$ -->

  <chapterinfo>
    <authorgroup>
      <author>
        <firstname>Jörg</firstname>

        <surname>Napp</surname>

        <affiliation>
          <jobtitle>Developer</jobtitle>

          <orgname>PostNuke</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Mark</firstname>

        <surname>West</surname>

        <affiliation>
          <jobtitle>Developer</jobtitle>

          <orgname>PostNuke</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Steffen</firstname>

        <surname>Voss</surname>

        <affiliation>
          <jobtitle>German Translation</jobtitle>

          <orgname><ulink url="http://www.post-nuke.net">post-nuke.net</ulink></orgname>
        </affiliation>
      </author>
    </authorgroup>

    <releaseinfo>$Revision$</releaseinfo>

    <date>$Date$</date>

    <keywordset>
      <keyword>Smarty</keyword>

      <keyword>pnRender</keyword>

      <keyword>Xanthia</keyword>
    </keywordset>
  </chapterinfo>

  <title>Einführung</title>

  <section id="pnrender.intro.whatis">
    <title>Was ist Smarty?</title>

    <para>Aus der Smarty-Dokumentation:</para>

    <blockquote>
      <attribution><ulink
      url="http://smarty.php.net/manual/de/what.is.smarty.php">Smarty
      Dokumentation</ulink></attribution>

      <para>Smarty ist eine Template-Engine für PHP. Genauer gesagt erlaubt es
      die einfache Trennung von Applikations-Logik und Design/Ausgabe. Dies
      ist vor allem wünschenswert, wenn der Applikationsentwickler nicht die
      selbe Person ist wie der Designer. Nehmen wir zum Beispiel eine Webseite
      die Zeitungsartikel ausgibt. Der Titel, die Einführung, der Author und
      der Inhalt selbst enthalten keine Informationen darüber wie sie
      dargestellt werden sollen. Also werden sie von der Applikation an Smarty
      übergeben, damit der Designer in den Templates mit einer Kombination von
      HTML- und Template-Tags die Ausgabe (Tabellen, Hintergrundfarben,
      Schriftgrössen, Stylesheets, etc.) gestalten kann. Falls nun die
      Applikation eines Tages angepasst werden muss, ist dies für den Designer
      nicht von Belang, da die Inhalte immer noch genau gleich übergeben
      werden. Genauso kann der Designer die Ausgabe der Daten beliebig
      verändern, ohne dass eine Änderung der Applikation vorgenommen werden
      muss. Somit können der Programmierer die Applikations-Logik und der
      Designer die Ausgabe frei anpassen, ohne sich dabei in die Quere zu
      kommen.</para>

      <para>Was Smarty nicht kann: Smarty versucht nicht die gesamte Logik aus
      dem Template zu verbannen. Solange die verwendete Logik ausschließlich
      für die Ausgabe verwendet wird, kann sie auch im Template eingebettet
      werden. Ein Tip: versuchen Sie Applikations-Logik aus dem Template und
      Präsentations-Logik aus der Applikation herauszuhalten. Nur so bleibt
      die Applikation auf absehbere Zeit gut skalier- und wartbar.</para>
    </blockquote>

    <para>Smarty trennt also das Layout vom Code, was zu besserem Code und
    weniger Fehlern führt.</para>
  </section>

  <section id="pnrender.intro.smartypn">
    <title>Smarty Unterstützung in PostNuke</title>

    <para>Diese überzeugenden Argumente für eine zentrale Templating Engine
    haben das Postnuke Entwicklerteam davon überzeugt, ein solches System in
    den Postnuke-Kern zu integrieren. Als Vorlage für die
    Postnuke-Smarty-Implementierung diente das pnRender-System von <ulink
    url="???">Envolution</ulink>. Inzwischen wurde der Quelltext aber komplett
    überarbeitet und neu geschrieben. pnRender ist eine Unterklasse (Subclass)
    von Smarty, so dass Smarty-Kenner pnRender so benutzen können wie Smarty.
    </para>
  </section>

  <section id="pnrender.intro.avail">
    <title>Verfügbarkeit</title>

    <para>pnRender ist als Teil des Systems erhältlich in PostNuke .750 bzw.
    .8</para>

    <para>pnRender ist darüberhinaus erhältlich als Add-on für PostNuke
    .726</para>
  </section>
</chapter>