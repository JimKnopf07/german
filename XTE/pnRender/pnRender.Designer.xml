<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<chapter id="pnrender.tempdev" lang="en-US"
         revision="$Revision$ $Date$"
         status="draft">
  <!-- $Id$ -->

  <chapterinfo>
    <authorgroup>
      <author>
        <firstname>JÃ¶rg</firstname>

        <surname>Napp</surname>

        <affiliation>
          <jobtitle>Developer</jobtitle>

          <orgname>PostNuke</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Patrick</firstname>

        <surname>Cornelissen</surname>

        <affiliation>
          <jobtitle>Developer</jobtitle>

          <orgname>pnCommerce Team</orgname>
        </affiliation>

        <contrib>Patrick contributed main parts of the Template
        documentation</contrib>
      </author>

      <author>
        <firstname>Mark</firstname>

        <surname>West</surname>

        <affiliation>
          <jobtitle>Developer</jobtitle>

          <orgname>PostNuke</orgname>
        </affiliation>
      </author>
    </authorgroup>

    <releaseinfo>$Revision$</releaseinfo>

    <date>$Date$</date>

    <keywordset>
      <keyword>Smarty</keyword>

      <keyword>pnRender</keyword>

      <keyword>Xanthia</keyword>
    </keywordset>
  </chapterinfo>

  <title>pnRender for template designers</title>

  <section id="pnrender.tempdev.intro">
    <title>Introduction</title>

    <para>This section describes how to design templates. A lot of material in
    this section is taken from the <ulink
    url="http://pnc.snowbankih.tzo.com/modules.php?op=modload&amp;name=News&amp;file=article&amp;sid=4">pnCommerce
    Website</ulink>. Templates can be created using any html editor adding in
    some non-html tags to it. They describe how smarty will replace them with
    the right data. This short introduction is does not cover all of
    everything that Smarty is able to do, however browse <ulink
    url="http://smarty.php.net">their site</ulink> and take a closer
    look.</para>

    <blockquote>
      <attribution><ulink url="http://smarty.php.net/crashcourse.php">Smarty
      Crash Course</ulink></attribution>

      <para>Take note that all of the functionality of Smarty (modifiers,
      functions, etc.) deal exclusively with the presentation of content. This
      is an important aspect of separating your presentation layer. All
      application/business logic should reside in your application, whereas
      all presentation-related matters should be handled by the templates.
      This is the paradigm Smarty was built upon.</para>
    </blockquote>
  </section>

  <section id="pnrender.tempdev.basics">
    <title>Template basics</title>

    <section id="pnrender.tempdev.basics.delimiters">
      <title>Delimiters</title>

      <para>All Smarty template tags are enclosed within <emphasis
      role="bold">delimiters</emphasis>. The standard Smarty delimiters are
      <markup>{</markup> and <markup>}</markup>. These are changed to
      <markup>&lt;!--[</markup> and <markup>]--&gt;</markup> in pnRender,
      because some people using Dreamweaver had a problem with the original
      tags. It was suggested that tags similar to Autotheme are used. The
      decision was made to use <markup>&lt;!--[</markup>
      <markup>]--&gt;</markup> to allow themes to be edited in Dreamweaver
      without distorting the page.</para>

      <para>As Smarty uses template compiling, the tags are removed in the
      compiled templates and replaced with php tags, so although the tags are
      significantly longer, to noticeable no performance loss should be
      noticed. The only overhead will be the first time the page is hit after
      that it just uses the compiled versions which will mean that there will
      be no difference with the delimiters used.</para>
    </section>

    <section id="pnrender.tempdev.basics.variables">
      <title>Variables</title>

      <para>Variables that are assigned from a module are referenced by
      preceding them with a dollar sign $.</para>

      <example>
        <title>Using variables in a template</title>

        <programlisting>&lt;!--[$name]--&gt;</programlisting>
      </example>

      <para>So it's very easy. For an associative array, "dot notation" is
      used:</para>

      <example>
        <title>Using associative arrays in a template</title>

        <programlisting>&lt;!--[$arrayname.index]--&gt;</programlisting>
      </example>
    </section>

    <section id="pnrender.tempdev.basics.modifiers">
      <title>Modifiers</title>

      <para>Smarty has a feature called <emphasis>variable
      modifiers</emphasis> that can alter the content of assigned variables
      from within the template. Modifiers can be chained together on one
      variable, making this feature quite flexible.</para>

      <example>
        <title>Modifiers</title>

        <programlisting format="linespecific">&lt;!--[$name|pnvarprepfordisplay]--&gt;</programlisting>

        <para>In this example, the <command
        moreinfo="none">pnvarprepfordisplay</command> modifier is applied to
        the variable.</para>
      </example>
    </section>

    <section id="pnrender.tempdev.basics.functions">
      <title>Functions</title>

      <para>Smarty also has template <emphasis>functions</emphasis> that can
      carry out tasks. Functions are processed and displayed by enclosing the
      function and its attributes into delimiters: <programlisting
      format="linespecific">&lt;!--[funcname attr1="val" attr2="val"]--&gt;</programlisting>An
      example of the usage of functions is the inclusion of other templates
      from within a template using the include function. A module may have
      many templates with the same header and footer information. These can
      managed as separate templates and includes in each template.</para>

      <example>
        <title>Including Another File</title>

        <programlisting format="linespecific">&lt;!--[include file="example_admin_menu.htm"]--&gt;</programlisting>

        <para>This way a common menu is included in the pages.</para>
      </example>

      <para>The global tags are for example function calls that return data
      from the PostNuke or a module's core. You can use them in every
      template. A simple example is pnml, it displays the content of a
      language specific define:</para>

      <example>
        <title>Internationalization</title>

        <programlisting format="linespecific">&lt;!--[pnml name="_SUBMIT"]--&gt;</programlisting>
      </example>
    </section>

    <section id="pnrender.tempdev.basics.flowcontrol">
      <title>Flow Control</title>

      <para>There are also loops to show items lists for example or
      if-then-else statements to control the flow of information.</para>

      <section>
        <title>If-Then</title>

        <para>To display things according to a condition, for example to
        display an item in bold according to a boolean variable, use the
        following tags:</para>

        <programlisting format="linespecific">...
&lt;!--[if $bold]--&gt;  
  &lt;b&gt;&lt;!--[$name|pnvarprephtmldisplay]--&gt;&lt;/b&gt;
&lt;!--[else]--&gt;
  &lt;!--[$name|pnvarprephtmldisplay]--&gt;
&lt;!--[/if]--&gt;
...</programlisting>

        <para>This shows the name in bold then the variable
        <varname>bold</varname> is set to true, and in normal font otherwise.
        These if-then tags have many different conditional qualifiers like: ==
        (equal), != (not equal), &gt; (greater), &lt; (smaller), &lt;=
        (smaller or equal), &gt;= (greater or equal), ... For further
        information, please visit <ulink
        url="http://smarty.php.net/manual/en/language.builtin.functions.php">this
        page</ulink>.</para>
      </section>

      <section>
        <title>Loops</title>

        <para>How can we show a previously unknown amount of items? This is
        very simple: Smarty facilitates a convenient way to loop over arrays
        of data with the section function. Here's an example:</para>

        <example>
          <title><command>foreach</command>-Loop</title>

          <programlisting>...
&lt;!--[foreach item=item from=$items]--&gt;
  &lt;!--[$item]--&gt;
&lt;!--[/foreach]--&gt;
...</programlisting>
        </example>

        <para>The <command>foreach</command> loop works much like PHP's
        foreach-loop.</para>
      </section>
    </section>
  </section>

  <section id="pnrender.tempdev.plugins">
    <title>Plugins</title>

    <para>pnRender ships with some plugins (functions as well as modifiers) ,
    providing template developers with access to PostNuke-specific functions.
    When you have worked with the PostNuke API, most of these plugins will
    look familiar to you.</para>

    <tip>
      <para>The PostNuke development team are looking forward for further
      suggestions for plugins. Please submit your suggestions at the <ulink
      url="http://noc.postnuke.com/tracker/?atid=104&amp;group_id=5&amp;func=browse">Feature
      Requests page</ulink> of the PostNuke NOC.</para>
    </tip>

    <para>A module developer may provide additional plugins to allow access to
    functions the module provides from the templates.</para>

    <para>All of these plugins are used just like any native Smarty
    plugin.</para>
  </section>
</chapter>